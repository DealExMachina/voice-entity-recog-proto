name: Deploy Docker to Koyeb

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_NAME: sales-buddy

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test
      env:
        AI_PROVIDER: demo
        RATE_LIMIT_ENABLED: false

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        target: production

    - name: Deploy to Koyeb
      if: github.ref == 'refs/heads/main'
      env:
        KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        if [ -z "$KOYEB_TOKEN" ]; then
          echo "‚ö†Ô∏è  KOYEB_TOKEN not set - skipping deployment"
          exit 0
        fi
        
        # Install Koyeb CLI
        curl -fsSL -o koyeb.tar.gz "https://github.com/koyeb/koyeb-cli/releases/latest/download/koyeb_linux_amd64.tar.gz"
        tar -xzf koyeb.tar.gz
        sudo mv koyeb /usr/local/bin/koyeb
        chmod +x /usr/local/bin/koyeb
        
        # Login to Koyeb
        echo "$KOYEB_TOKEN" | koyeb auth login --token
        
        # Create app if needed
        if ! koyeb apps list --output json | jq -e ".apps[] | select(.name == \"$APP_NAME\")" > /dev/null 2>&1; then
          koyeb apps create $APP_NAME
        fi
        
        # Deploy Docker image to Frankfurt only
        echo "üöÄ Deploying Docker image to Koyeb Frankfurt..."
        koyeb services update 75e7338e-e657-402e-9f98-4e4fe4eedb9c \
          --docker ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main \
          --regions fra \
          --regions '!was' \
          --env NODE_ENV=production \
          --env PORT=3000 \
          --env AI_PROVIDER=openai \
          --env OPENAI_API_KEY="$OPENAI_API_KEY" \
          --env RATE_LIMIT_ENABLED=true \
          --env DB_PATH=/tmp/entities.db \
          --ports 3000:http \
          --health-checks 3000:http:/api/health \
          --instance-type nano \
          --scale 1
        
        echo "üéâ Docker deployment to Frankfurt completed!"
        echo "üåê Check your service at: https://app.koyeb.com/apps/$APP_NAME"
        
        # Wait for deployment and show status
        echo "‚è≥ Waiting for deployment to stabilize..."
        sleep 30
        koyeb services get 75e7338e-e657-402e-9f98-4e4fe4eedb9c --output table 