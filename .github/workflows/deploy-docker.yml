name: Deploy Docker to Koyeb

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_NAME: sales-buddy

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test
      env:
        AI_PROVIDER: demo
        RATE_LIMIT_ENABLED: false

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Install Koyeb CLI
      run: curl -fsSL https://raw.githubusercontent.com/koyeb/koyeb-cli/master/install.sh | sh

    - name: Configure Koyeb CLI
      run: |
        mkdir -p $HOME/.koyeb
        echo "api:" > $HOME/.koyeb.yaml
        echo "  token: ${{ secrets.KOYEB_TOKEN }}" >> $HOME/.koyeb.yaml

    - name: Deploy to Koyeb
      env:
        DOCKER_IMAGE: ghcr.io/dealexmachina/voice-entity-recog-proto:main
      run: |
        SERVICE_NAME="webapp"
        APP_NAME="sales-buddy"
        if $HOME/.koyeb/bin/koyeb service update $SERVICE_NAME --app $APP_NAME \
          --docker "$DOCKER_IMAGE" \
          --docker-private-registry-secret "GitHub-registry" \
          --ports "3000:http" \
          --regions "fra" \
          --instance-type "micro" \
          --checks "3000:http:/health" \
          --checks-grace-period "3000=60" \
          --env "NODE_ENV=production" \
          --env "PORT=3000" \
          --env "AI_PROVIDER=openai" \
          --env "RATE_LIMIT_ENABLED=false" \
          --env "OPENAI_API_KEY={{secret.OPENAI_API_KEY}}"; then
          echo "‚úÖ Service updated."
        else
          echo "‚ÑπÔ∏è Service does not exist, creating..."
          $HOME/.koyeb/bin/koyeb service create $SERVICE_NAME --app $APP_NAME \
            --docker "$DOCKER_IMAGE" \
            --docker-private-registry-secret "GitHub-registry" \
            --ports "3000:http" \
            --regions "fra" \
            --instance-type "micro" \
            --checks "3000:http:/health" \
            --checks-grace-period "3000=60" \
            --env "NODE_ENV=production" \
            --env "PORT=3000" \
            --env "AI_PROVIDER=openai" \
            --env "RATE_LIMIT_ENABLED=false" \
            --env "OPENAI_API_KEY={{secret.OPENAI_API_KEY}}"
        fi
        
        echo "üéâ Docker deployment triggered for sales-buddy/webapp!"
        
        # Wait a moment and check deployment status
        echo "‚è≥ Waiting for deployment to initialize..."
        sleep 10
        
        echo "üìä Final deployment status:"
        $HOME/.koyeb/bin/koyeb services get sales-buddy/webapp --app sales-buddy || true
        
        echo ""
        echo "üåê Check your service at: https://app.koyeb.com/apps/sales-buddy"
        echo "üì± Monitor logs with: koyeb service logs sales-buddy/webapp --app sales-buddy" 