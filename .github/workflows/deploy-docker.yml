name: Deploy Docker to Koyeb

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_NAME: sales-buddy

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test
      env:
        AI_PROVIDER: demo
        RATE_LIMIT_ENABLED: false

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Deploy to Koyeb
      if: github.ref == 'refs/heads/main'
      env:
        KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        if [ -z "$KOYEB_TOKEN" ]; then
          echo "‚ö†Ô∏è KOYEB_TOKEN not set - skipping deployment"
          exit 0
        fi

        curl -fsSL https://raw.githubusercontent.com/koyeb/koyeb-cli/master/install.sh | sh
        export PATH=$HOME/.koyeb/bin:$PATH

        echo "$KOYEB_TOKEN" | koyeb auth login --token

        if ! koyeb apps get ${{ env.APP_NAME }} >/dev/null 2>&1; then
          echo "Creating app ${{ env.APP_NAME }}"
          koyeb apps create ${{ env.APP_NAME }}
        fi

        SERVICE_NAME="webapp"
        if koyeb services get $SERVICE_NAME --app ${{ env.APP_NAME }} >/dev/null 2>&1; then
          echo "Updating service $SERVICE_NAME"
          koyeb services update $SERVICE_NAME --app ${{ env.APP_NAME }} \
            --docker "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main" \
            --docker-private-registry-secret "GitHub-registry" \
            --ports "3000:http" \
            --regions "fra" \
            --instance-type "nano" \
            --health-checks "http(path=/api/health,port=3000)" \
            --env "NODE_ENV=production" \
            --env "PORT=3000" \
            --env "AI_PROVIDER=openai" \
            --env "OPENAI_API_KEY={{secret.OPENAI_API_KEY}}"
        else
          echo "Creating service $SERVICE_NAME"
          koyeb services create $SERVICE_NAME --app ${{ env.APP_NAME }} \
            --docker "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main" \
            --docker-private-registry-secret "GitHub-registry" \
            --ports "3000:http" \
            --regions "fra" \
            --instance-type "nano" \
            --health-checks "http(path=/api/health,port=3000)" \
            --env "NODE_ENV=production" \
            --env "PORT=3000" \
            --env "AI_PROVIDER=openai" \
            --env "OPENAI_API_KEY={{secret.OPENAI_API_KEY}}"
        fi
        
        echo "üéâ Docker deployment triggered for ${{ env.APP_NAME }}/$SERVICE_NAME!"
        echo "üåê Check your service at: https://app.koyeb.com/apps/${{ env.APP_NAME }}" 